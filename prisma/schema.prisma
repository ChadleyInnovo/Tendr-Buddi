datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  company       Company?    @relation(fields: [companyId], references: [id])
  companyId     String?
  documents     Document[]
  meetings      Meeting[]   @relation("MeetingParticipants")
  ownedMeetings Meeting[]   @relation("MeetingOwner")
  notifications Notification[]
  sessions      Session[]
}

model Company {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  documents   Document[]
  meetings    Meeting[]
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String
  fileSize    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  meetings    Meeting[]
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  status      MeetingStatus @default(SCHEDULED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation("MeetingOwner", fields: [ownerId], references: [id])
  ownerId     String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  participants User[]  @relation("MeetingParticipants")
  documents   Document[]
  notifications Notification[]
}

model Notification {
  id          String   @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  meeting     Meeting? @relation(fields: [meetingId], references: [id])
  meetingId   String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  ADMIN
}

enum MeetingStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  MEETING_REMINDER
  DOCUMENT_SHARED
  SYSTEM_NOTIFICATION
}

